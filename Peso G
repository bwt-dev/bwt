Bitcoin Wallet Tracker
Estado de compilaci√≥n Crates.io Lanzamiento de Docker Licencia MIT Pull Requests Bienvenido

bwt es un rastreador ligero de billetera xpub y un motor de consulta para Bitcoin, implementado en Rust.

üî∏ Indizador de billetera personal HD (similar a EPS)
üî∏ Servidor Electrum RPC (¬°tambi√©n disponible como complemento!)
üî∏ API HTTP REST moderna y f√°cil de desarrollar
üî∏ Actualizaciones en tiempo real con Server-Sent-Events o Web Hooks

‚ö†Ô∏èEste es un software alfa temprano que probablemente tenga errores. Usar con cuidado, preferiblemente en testnet / regtest.

Introducci√≥n
Configuraci√≥n del servidor
Instalaci√≥n
Servidor Electrum-only
Poda
Indexaci√≥n en tiempo real
Opciones avanzadas
Complemento Electrum üí•
API HTTP
Carteras HD
Actas
Direcciones
Salidas
Bloques
Mempool y tarifas
Eventos enviados por el servidor üåü
Diverso
Ganchos Web
Desarrollando üë©‚Äçüíª
Gracias
Desarrollo de soporte: bc1qmuagsjvq0lh3admnafk0qnlql0vvxv08au9l2d o tippin.me

Introducci√≥n
bwtes un indexador de billetera HD liviano y de alto rendimiento respaldado por un nodo completo de bitcoin, que usa un modelo similar al del Servidor Personal Electrum. Puede servir como una alternativa personal a los servidores p√∫blicos de Electrum o aplicaciones de bitcoins de energ√≠a como backends de billetera, procesadores de pago y m√°s.

Utiliza bitcoind para realizar un seguimiento de las direcciones de su billetera (derivadas de su xpub (s)) y crea un √≠ndice de su historial que puede consultarse utilizando el protocolo Electrum RPC o utilizando la API HTTP personalizada de bwt .

Las actualizaciones en tiempo real est√°n disponibles a trav√©s de eventos enviados por el servidor (una conexi√≥n HTTP de larga duraci√≥n), o mediante actualizaciones push de Web Hooks (una solicitud HTTP enviada a su URL con el evento).

El √≠ndice se gestiona actualmente en la memoria y no se conserva (se espera que esto cambie), pero construirlo es bastante r√°pido: bwt puede indexar miles de transacciones en cuesti√≥n de segundos.

TL; DR: EPS + Rust + Modern HTTP API + Actualizaciones push

Configuraci√≥n del servidor
Consiga un nodo Bitcoin Core sincronizado (se recomienda v0.19, v0.17 es suficiente. txindexNo es necesario) e instale bwt usando uno de los m√©todos a continuaci√≥n.

Instalaci√≥n
Nuevo en v0.1.1 : ahora tambi√©n puede instalar bwt como un complemento de Electrum con un servidor incorporado (que no requiere la instalaci√≥n del servidor independiente que se describe a continuaci√≥n).

Binarios preconstruidos firmados
Disponible para descargar en la p√°gina de versiones (Linux y Windows).

Los lanzamientos est√°n firmados por Nadav Ivgi (@shesek). La clave p√∫blica se puede verificar en keybase , github , twitter y HN .

$ wget https://github.com/shesek/bwt/releases/download/v0.1.3/bwt-0.1.3-x86_64-linux.tar.gz

# Verificar firma
$ gpg --keyserver keyserver.ubuntu.com --recv-keys FCF19B67866562F08A43AAD681F6104CD0F150FC
$ wget -qO - https://github.com/shesek/bwt/releases/download/v0.1.3/SHA256SUMS.asc \
  El | gpg --decrypt - | grep ' bwt-0.1.3-x86_64-linux.tar.gz $ '  | sha256sum -c -

$ tar zxvf bwt-0.1.3-x86_64-linux.tar.gz
$ ./bwt-0.1.3-x86_64-linux/bwt --xpub < xpub > ...
De la fuente
Instale Rust y:

$ sudo apt install build-essential
$ git clone https://github.com/shesek/bwt &&  cd bwt
$ construcci√≥n de carga - lanzamiento
$ ./target/release/bwt --xpub < xpub > ...
O usando el paquete crates.io:

$ cargo instalar bwt
$ bwt --xpub < xpub >
(Aseg√∫rate de que ~/.cargo/binest√© en tu PATH)

Con Docker
Suponiendo que su datadir de bitcoin est√© en ~/.bitcoin,

$ docker run --net host -v ~ /.bitcoin:/bitcoin shesek / bwt --xpub < xpub > ...
(No es necesario montar el datadir de bitcoin si no est√° utilizando el archivo cookie).

Ejecutando bwt
bwt --xpub <xpub> deber√≠a ser suficiente para ponerte en marcha.

Puede configurar los --network(valores predeterminados para mainnet), sus --bitcoind-url(valores predeterminados para http://127.0.0.1:<default-rpc-port>), --bitcoind-dir(valores predeterminados para ~/.bitcoin) y --bitcoind-cred <user:pass>(valores predeterminados para usar el archivo cookie desde bitcoind-dir).

Puede configurar m√∫ltiples --xpubs para rastrear. Esto tambi√©n es compatible con ypubs y zpubs.

Por defecto, el servidor Electrum estar√° vinculado en el puerto 50001/ 60001/ 60401(seg√∫n la red) y el servidor HTTP estar√° vinculado en el puerto 3060. Esto se puede controlar con --electrum-rpc-addr y --http-server-addr.

‚ö†Ô∏èTanto el servidor API HTTP como el servidor Electrum no est√°n autenticados y no est√°n encriptados. Si los est√° exponiendo a trav√©s de Internet, deben colocarse detr√°s de algo como un t√∫nel SSH, VPN o un servicio oculto Tor. ( m√°s informaci√≥n )

Puede configurar -vpara aumentar la verbosidad o -vvaumentarla m√°s.

Consulte --helpla lista completa de opciones.

Archivo de configuraci√≥n
Las opciones de configuraci√≥n se pueden establecer ~/bwt.envcomo variables de entorno en el formato dotenv. Por ejemplo:

NETWORK=regtest
GAP_LIMIT=20
XPUBS=<xpub1>,<xpub2>
Tambi√©n se admite la configuraci√≥n directa de las variables de entorno.

Servidor Electrum-only
Si solo est√° interesado en un servidor Electrum independiente, puede deshabilitar el servidor API HTTP compilando bwt con --no-default-features --features electrum, usando la shesek/bwt:electrumimagen del acoplador o descargando el electrum_onlybinario preconstruido.

Esto elimina varias dependencias grandes y deshabilita el track-spends√≠ndice de la base de datos (que no es necesario para el servidor electrum).

(Consulte tambi√©n el complemento Electrum ).

Poda
Puede usar bwt con poda, pero:

Tendr√° que proporcionar una fecha de reescaneo que est√© dentro del rango de bloques no podados, o usar nonepara deshabilitar completamente el reescaneo (ver aqu√≠ ).

Electrum necesita ejecutarse --skipmerklecheckpara tolerar las pruebas de SPV faltantes para transacciones en bloques podados.

Si est√° ejecutando Electrum with --skipmerklecheck, tambi√©n puede configurar bwt with --electrum-skip-merklepara ahorrar algunos recursos al no generar pruebas SPV incluso cuando sea posible.

Ambas configuraciones se habilitan autom√°ticamente cuando se utiliza el complemento Electrum.

Indexaci√≥n en tiempo real
Por defecto, bwt consultar√° bitcoind para nuevos bloques / transacciones cada 5 segundos. Esto se puede ajustar con --poll-interval <seconds>.

Para obtener reales actualizaciones en tiempo real, es posible configurar el nodo bitcoind para enviar una POST /syncsolicitud al servidor http bwt cada vez que se encuentra un nuevo bloque o transacci√≥n cartera, utilizando la walletnotifyy blocknotifyopciones.

Ejemplo de configuraci√≥n de bitcoind:

walletnotify=curl -X POST http://localhost:3060/sync
blocknotify=curl -X POST http://localhost:3060/sync
Despu√©s de verificar que esto funciona, puede aumentar su --interval-pollpara evitar la indexaci√≥n innecesaria y reducir el uso de la CPU.

Si est√° utilizando el modo de solo electrum sin el servidor http, en su lugar, puede configurar bwt para que se una en un socket Unix usando --unix-listener-path <path>y abrir una conexi√≥n para iniciar una sincronizaci√≥n del indexador.

Por ejemplo, comience --unix-listener-path /home/satoshi/bwt-sync-sockety configure su bitcoind con:

walletnotify=nc -U /home/satoshi/bwt-sync-socket
blocknotify=nc -U /home/satoshi/bwt-sync-socket
Si ncno est√° disponible, tambi√©n puede usar socat - UNIX-CONNECT:/home/satoshi/bwt-sync-socket.

Si usa Docker, puede vincular el socket en un directorio montado desde el host para que est√© disponible fuera del contenedor. Por ejemplo, --unix-listener-path /bitcoin/bwt-socket.

Opciones avanzadas
L√≠mite de espacio
Puede configurar el l√≠mite de espacio con --gap--limit <N>(el valor predeterminado es 20). El l√≠mite de espacio establece el n√∫mero m√°ximo de direcciones consecutivas no utilizadas que se importar√°n antes de asumir que no hay m√°s direcciones utilizadas para descubrir.

Puede importar lotes m√°s grandes con un espacio m√°s alto durante la sincronizaci√≥n inicial utilizando --initial-import-size <N>(el valor predeterminado es 100). Un valor m√°s alto significa menos rescanes. Debe aumentarse para billeteras grandes.

Pol√≠tica de reescaneo / cumplea√±os de billetera
Puede especificar una pol√≠tica de re-escaneo con el cumplea√±os de la tecla para indicar a qu√© distancia se debe analizar, utilizando --xpub <xpub>:<rescan>, donde <rescan>es uno de all(re-escaneo desde el principio, el valor por defecto), none(no hacer re-escaneo en absoluto), el cumplea√±os clave con formato yyyy-mm-dd, o el cumplea√±os como una marca de tiempo de Unix.

Monedero m√∫ltiple Bitcoin Core
Si usa una billetera m√∫ltiple , puede especificar con qu√© billetera usar --bitcoind-wallet <name>.

Se recomienda usar una billetera de solo reloj separada para bwt (se puede crear con bitcoin-cli createwallet bwt true).

Tenga en cuenta que EPS y bwt no deben ejecutarse en la misma billetera bitcoind con el mismo xpub, entrar√°n en conflicto.

Complemento Electrum
Puede configurar bwt como un complemento de Electrum que integra el servidor de Electrum en la billetera de Electrum.

Descargue el electrum_pluginpaquete de la p√°gina de lanzamientos , verifique la firma y descompr√≠malo en su electrum/pluginsdirectorio. Despu√©s de reiniciar Electrum, deber√≠a ver bwt en la lista de complementos instalados en Tools -> Plugins.

La versi√≥n de Electrum compatible es 3.3.8. El complemento est√° actualmente disponible para Linux y Windows.

Tenga en cuenta que no es posible instalar complementos externos con Electrum AppImage o el ejecutable independiente de Windows. Tendr√° que ejecutar desde tar.gz en Linux, usar el instalador de Windows o ejecutar desde la fuente .

Para compilar el complemento desde la fuente, primero compile el binario como se describe aqu√≠ , c√≥pielo en el contrib/electrum-plugindirectorio, luego coloque ese directorio debajo electrum/plugins, perobwt cambie su nombre a (Electrum no lo reconocer√° de otra manera).

Captura de pantalla de bwt integrado en Electrum

API HTTP
Todos los puntos finales devuelven JSON. Todas las cantidades de bitcoin est√°n en satoshis.

Carteras HD
Nota: Cada --xpubespecificado se representar√° como dos entradas de billetera, una para la cadena externa (utilizada para recibir direcciones) y otra para la cadena interna (utilizada para cambiar direcciones). Puede asociar las billeteras a su xpub padre usando el origincampo.

GET /hd
Obtenga un mapa de todas las billeteras HD rastreadas, como un objeto json indexado por la huella digital.

Expandir...
GET /hd/:fingerprint
Obtenga informaci√≥n sobre la billetera HD identificada por el c√≥digo hexadecimal fingerprint.

Expandir...
GET /hd/:fingerprint/:index
Obtenga informaci√≥n b√°sica para la clave hd en el √≠ndice de derivaci√≥n index.

Expandir...
GET /hd/:fingerprint/next
Obtenga la siguiente direcci√≥n no utilizada en la billetera HD especificada.

Expandir...
GET /hd/:fingerprint/gap
Obtenga el n√∫mero m√°ximo actual de direcciones consecutivas no utilizadas en la billetera HD especificada.

Expandir...
Actas
Formato de transacci√≥n de billetera
Este formato solo est√° disponible para transacciones de billetera e incluye informaci√≥n de billetera contextual sobre productos financiados e insumos gastados. No incluye entradas / salidas que no est√°n relacionadas con la billetera.

Campos de transacci√≥n:

txid
block_height- la altura del bloque de confirmaci√≥n o nullpara transacciones no confirmadas
fee (puede no estar disponible)
funding - contiene una entrada para cada salida creada por esta transacci√≥n que es propiedad de la billetera
vout - el √≠ndice de salida
amount - la cantidad de salida
scripthash - el scripthash financiado por esta salida
address - la direcci√≥n financiada por este resultado
origin- informaci√≥n del origen de la billetera hd, en <fingerprint>/<index>formato
spent_by- la entrada de transacci√≥n gasta esta salida en txid:vinformato, o nullpara salidas no gastadas (solo disponible con track-spends)
spending - contiene una entrada para cada entrada que gasta una salida de billetera
vin - el √≠ndice de entrada
amount - la cantidad de la salida anterior gastada por esta entrada
scripthash - el scripthash del resultado anterior gastado por esta entrada
address - la direcci√≥n de la salida anterior gastada por esta entrada
origin - informaci√≥n de origen de la billetera hd
prevout- el <txid>:<vout>ser gastado
balance_change - el cambio neto al saldo de la billetera infligido por esta transacci√≥n
GET /tx/:txid
Obtenga la transacci√≥n en el formato de transacci√≥n de billetera .

Expandir...
GET /tx/:txid/verbose
Obtenga la transacci√≥n en JSON con el formato de bitcoind'sgetrawtransaction con verbose=true.

Expandir...
GET /tx/:txid/hex
Obtenga la transacci√≥n sin formato formateada como una cadena hexadecimal.

Expandir...
GET /tx/:txid/proof
Obtenga la prueba de inclusi√≥n de merkle para la transacci√≥n.

Expandir...
GET /txs/since/:block-height
Obtenga todas las transacciones de billetera confirmadas en o despu√©s block-height, m√°s todas las transacciones no confirmadas, para todas las direcciones rastreadas.

Expandir...
GET /txs/since/:block-height/compact
Obtenga una representaci√≥n m√≠nima compacta de todas las transacciones de billetera desde entonces block-height.

Expandir...
POST /tx
Transmitir una transacci√≥n en bruto a la red Bitcoin.

Expandir...
Direcciones, Scripthashes y HD Keys
GET /address/:address
GET /scripthash/:scripthash
GET /hd/:fingerprint/:index
Obtenga informaci√≥n b√°sica para la direcci√≥n proporcionada, scripthash o clave hd.

Expandir...
GET /address/:address/stats
GET /scripthash/:scripthash/stats
GET /hd/:fingerprint/:index/stats
Obtenga informaci√≥n b√°sica y estad√≠sticas para la direcci√≥n, scripthash o clave de acceso proporcionados.

Expandir...
GET /address/:address/utxos
GET /scripthash/:scripthash/utxos
GET /hd/:fingerprint/:index/utxos
Obtenga la lista de salidas de transacciones no gastadas propiedad de la direcci√≥n, scripthash o clave de acceso provistos.

Expandir...
GET /address/:address/txs
GET /scripthash/:scripthash/txs
GET /hd/:fingerprint/:index/txs
Obtenga la lista de todas las transacciones en el historial de la direcci√≥n proporcionada, scripthash o clave hd.

Expandir...
GET /address/:address/txs/compact
GET /scripthash/:scripthash/txs/compact
GET /hd/:fingerprint/:index/txs/compact
Obtenga una representaci√≥n m√≠nima compacta del historial de la direcci√≥n proporcionada, scripthash o clave hd.

Expandir...
Salidas
Formato de salida
txid - la transacci√≥n que financia este producto
vout - el √≠ndice de salida
amount - la cantidad de salida
scripthash - el scripthash financiado por esta salida
address - la direcci√≥n financiada por este resultado
origin- informaci√≥n del origen de la billetera hd, en <fingerprint>/<index>formato
block_height- la altura del bloque de confirmaci√≥n o nullpara transacciones no confirmadas
spent_by- la entrada de transacci√≥n gasta esta salida en txid:vinformato, o nullpara salidas no gastadas (solo disponible con track-spends)
GET /txo/:txid/:vout
Obtenga informaci√≥n sobre la salida de transacci√≥n especificada.

Expandir...
GET /utxos
Obtenga todas las salidas de billetera no gastadas.

Expandir...
Ver tambi√©n: GET /address/:address/utxos

Bloques
GET /block/tip
Obtenga la punta actual de la cadena de bloques.

Expandir...
GET /block/:hash
Obtenga el encabezado de bloque del hash de bloque especificado con el formato de bitcoind'sgetblockheader con verbose=true.

Expandir...
GET /block/:hash/hex
Obtenga el encabezado de bloque del hash de bloque especificado como una cadena hexadecimal.

Expandir...
GET /block/:height
Obtenga el hash de bloque a la altura de bloque especificada.

Expandir...
Mempool y tarifas
GET /mempool/histogram
Obtenga el histograma de distribuci√≥n de tarifa de mempool.

Expandir...
GET /fee-estimate/:target
Obtenga la estimaci√≥n de tarifa para confirmar dentro de los targetbloques. Utiliza bitcoind's smartestimatefee.

Expandir...
Eventos enviados por el servidor
Categor√≠as de eventos
ChainTip(block_height, block_hash) - emitido cada vez que un nuevo bloque extiende la mejor cadena.
Reorg(block_height, prev_block_hash, curr_block_hash)- indica que se detect√≥ una reorganizaci√≥n activada block_height, con el hash de bloque anterior a esta altura y el actual.
Transaction(txid, block_height) - emitido para nuevas transacciones, as√≠ como para transacciones que cambian su estado de confirmaci√≥n (generalmente de no confirmado a confirmado, posiblemente al rev√©s en caso de reorganizaciones).
TransactionReplaced(txid) - indica que la transacci√≥n entra en conflicto con otra transacci√≥n y ya no se puede confirmar (tambi√©n conocido como doble gasto).
TxoFunded(funding_txid:vout, scripthash, amount, block_height) - se emite cuando se crea una salida de billetera sin gastar (para nuevas transacciones y cambios de estado de confirmaci√≥n).
TxoSpent(spending_txid:vin, scripthash, prevout, block_height) - se emite cuando se gasta una salida de billetera (para nuevas transacciones y cambios de estado de confirmaci√≥n).
Para transacciones no confirmadas, block_heightser√° null.

GET /stream
Suscr√≠base a un flujo de eventos enviados por el servidor en tiempo real de notificaciones de actualizaci√≥n del indexador.

Expandir...
GET /address/:address/stream
GET /scripthash/:scripthash/stream
GET /hd/:fingerprint/:index/stream
Suscr√≠base a un flujo de notificaciones en tiempo real de TxoFunded/ TxoSpenteventos para la direcci√≥n, scripthash o clave de acceso proporcionados.

Expandir...
Ponerse al d√≠a con los eventos perdidos y la detecci√≥n de reorganizaci√≥n
Para ponerse al d√≠a con los eventos hist√≥ricos que su aplicaci√≥n perdi√≥ durante su inactividad, puede especificar el synced-tippar√°metro de cadena de consulta con <block-height>:<block-hash>el √∫ltimo bloque que se sabe que se proces√≥.

Si el synced-tipsigue siendo parte de la mejor cadena, esto devolver√° todos los hist√≥ricos Transaction, TxoFundedy TxoSpenteventos que ocurrieron despu√©s block-height(exclusivo, ordenados con antiguos primero, sin confirmar incluido al final), seguido por un solo ChainTip evento con la punta actualmente sincronizados, seguido de una flujo de eventos en tiempo real.

Si synced-tipya no forma parte de la mejor cadena, 410 Gonese devolver√° un error que indica que se produjo una reorganizaci√≥n. Una forma de recuperarse de la reorganizaci√≥n es volver a sincronizar desde Nbloques antes de los hu√©rfanos synced-tipy considerar cualquier entrada que ya no se muestre como doblemente gastada (donde Nes lo suficientemente grande como para reorganizar m√°s profundo de lo que es poco probable)

Puede especificar synced-tipcon solo la altura para omitir la detecci√≥n de reorganizaci√≥n (por ejemplo, 0para obtener todos los eventos desde el bloqueo de g√©nesis).

Expandir...
Diverso
POST /sync
Activa una sincronizaci√≥n de indexador. Ver actualizaciones en tiempo real .

GET /dump
Vuelca el contenido del almac√©n de √≠ndices como JSON.

GET /debug
Vuelca el contenido del almac√©n de √≠ndice como una cadena de depuraci√≥n.

Ganchos Web
Si est√° compilando bwt desde la fuente, deber√° configurarlo --features webhookspara habilitar el soporte de web hooks. Esto tambi√©n requerir√° apt install libssl-dev pkg-config. El binario principal preconstruido y la shesek/bwtimagen del acoplador vienen con soporte para webhooks habilitado de forma predeterminada.

Puede configurar --webhook-url <url>que bwt env√≠e notificaciones push como una POSTsolicitud a la proporcionada <url>. Las solicitudes se enviar√°n con una matriz serializada JSON de una o m√°s actualizaciones de √≠ndice como cuerpo.

Se recomienda incluir una clave secreta dentro de la URL para verificar la autenticidad de la solicitud.

Puede especificar m√∫ltiples --webhook-urlpara notificarlos a todos.

Tenga en cuenta que bwt actualmente intenta enviar la solicitud de webhook una vez y no vuelve a intentarlo en caso de fallas. Se recomienda ponerse al d√≠a ocasionalmente utilizando los puntos finales GET /txs/since/:block-heighto GET /stream(ver "Ponerse al d√≠a con los eventos perdidos" ).

Consejo: servicios como webhook.site o requestbin pueden ser √∫tiles para depurar webhooks. (no hace falta decir que solo para uso de regtest / testnet no sensible a la privacidad)

Desarrollando
Recursos para desarrolladores
La documentaci√≥n de la API p√∫blica Rust es disponible en docs.rs .

Un diagrama que muestra c√≥mo la Yum grandes piezas interact√∫an juntos es disponible aqu√≠ .

Un ejemplo de cliente JavaScript que utiliza la API HTTP para el seguimiento de billetera est√° disponible en examples/wallet-tracker.js.

Entorno de desarrollo
Para configurar r√°pidamente un entorno de desarrollo, puede usarlo scripts/dev-env.shpara crear una red bitcoind regtest y dos billeteras Electrum, financiar las billeteras, iniciar bwt con seguimiento para los xpubs de ambas billeteras e iniciar la GUI de Electrum.

Para usarlo, simplemente ejecute $ ./scripts/dev-env.shdesde el directorio ra√≠z con bitcoind, bitcoin-clie electruminstale en su PATH.

Puede configurar FEATURESpara especificar qu√© caracter√≠sticas habilitar (ver a continuaci√≥n) o configurar NO_GUI=1para dejar la billetera Electrum ejecut√°ndose en modo demonio sin iniciar la GUI.

Si lo ha cargo watchinstalado, se usar√° para observar los cambios y reiniciar autom√°ticamente bwt.

Caracteristicas
bwt tiene 4 funciones opcionales: http, electrum, webhooksy track-spends.

Todos est√°n habilitados por defecto, excepto webhooks.

Si est√° trabajando en un c√≥digo que no est√° relacionado con la API HTTP, es mucho m√°s r√°pido construir con solo las electrum track-spendscaracter√≠sticas.

Puede usar scripts/check.shpara ejecutar cargo checktodos los combos de caracter√≠sticas (sensibles). Esto es importante para garantizar que no se introdujeron errores en las combinaciones de funciones que no utiliz√≥.

Pruebas
Se pueden ejecutar pruebas de integraci√≥n de extremo a extremo ./test/tests.sh. Las pruebas implementan una red regtest, una instancia de bwt y una billetera Electrum conectada a ella (en modo sin cabeza), luego ejecutan algunas pruebas b√°sicas utilizando el cliente Electrum y contra la API HTTP REST.

Ejecute con bash -x test/tests.sh -vpara obtener una salida m√°s detallada.

Contribuciones
¬°Son bienvenidos!

La √∫nica pauta es usar cargo fmt.

Puede consultar la lista de problemas de mejora para algunas ideas para trabajar (descriptores de script de salida <3).

Gracias
Los electrs de @romanz para la fant√°stica implementaci√≥n del servidor electrum en el que se basa bwt.

@ Chris-rolo 's electro-personal-servidor por inspirar este proyecto y el modelo de seguimiento personal.

rust-bitcoin , rust-bitcoincore-rpc y los otros m√≥dulos incre√≠bles de la familia rust-bitcoin.

Licencia
MIT
